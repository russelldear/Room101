recursiveReplace(document.body);function recursiveReplace(node) {	var child, next;	switch ( node.nodeType )  	{		case 1:  // Element		case 9:  // Document		case 11: // Document fragment			child = node.firstChild;			while ( child ) 			{				next = child.nextSibling;				recursiveReplace(child);				child = next;			}			break;		case 3: // Text node			Room101(node);			break;	}}function Room101(textNode){	var v = textNode.nodeValue;	textNode.nodeValue = v.replace(/[0,1, ]{8,}/g, function Replacer(x) { return x + Translate(x); });}function Translate(binaryString) {	if (!binaryString.match(/[0,1]{8,}/g)) {		return "";	}	var result = " (\'";	var binaryCharacters;	if (binaryString.includes(" ")){		binaryCharacters = binaryString.split(" ");	}	else {		binaryCharacters = binaryString.match(/.{1,8}/g);	}	for (var i = 0; i < binaryCharacters.length; i ++) {		result += String.fromCharCode(parseInt(binaryCharacters[i], 2));		}	result += "\')";	return result;}